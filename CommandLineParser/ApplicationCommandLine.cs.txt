/*
 ******************************************************************************
 This file is part of MattRaffelNetCode.

    MattRaffelNetCode is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    MattRaffelNetCode is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MattRaffelNetCode; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


    architected and written by 
    matt raffel 
    matt.raffel@mindspring.com

       copyright (c) 2005 by matt raffel unless noted otherwise

 ******************************************************************************
*/
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Data;

namespace MattRaffelNetCode.ApplicationSupport
{
   #region ApplicationCommandLine Class Implementation
   /// <summary>
   /// The purpose of the ApplicationCommandLine class is to allow application
   /// programmers the ability to avoid having to parse the command line,
   /// handling all of the complexities of the commandline, and allow them
   /// to focus on the data given in the command line.
   /// 
   /// The ApplicationCommandLine class maps program defined data (instances of 
   /// CommandLineArgument) to actual command line input (thats the Main(String[] args) 
   /// input).  
   /// 
   /// For the purpose of this class, there are two types inputs recieved on the
   /// command line.   Arguments that are deliniated with a delimter such as -, and
   /// arguments that are not deliniated.
   /// 
   /// Arguments deliniated with a delimter are called cmdArgs and
   /// those that are not will be called fileArgs
   /// 
   /// One thing to note, not all undelinated arguments are fileArgs.  Some of them could be
   /// data for a cmdArg.  In such case they are called dataArgs.  The content for dataArgs are
   /// stored with cmdArg class instances if the cmdArg is an instance of DataCommandLineArgument
   /// 
   /// Example:  myprog -c -f notes.txt notes2.txt
   /// 
   /// -c is a cmdArg
   /// -f is a cmdArg with a dataArg
   /// notes.txt is the dataArg for -f
   /// notes2.txt is a fileArg
   /// 
   /// of course the above example assumes that -f is defined as a dataArg
   /// </summary>
   public class ApplicationCommandLine : IEnumerable 
   {
      /// <summary>
      /// identifies valid syntax for denoting a command line argument
      /// </summary>
      private string[]           _validArgPrefixes = new string[] { "-", "/" };

      /// <summary>
      /// 
      /// </summary>
      private Hashtable          _cmdArgs = new Hashtable();

      /// <summary>
      /// 
      /// </summary>
      private StringCollection   _fileArgs = new StringCollection();

      /// <summary>
      /// search through the known acceptable argument prefixes and see if the 
      /// string input begins with one of them.
      /// 
      /// This search is case sensitive 
      /// </summary>
      /// <param name="arg"></param>
      /// <returns>true if input begins with one of the items in _validArgPrefixes</returns>
      private bool IsStartingWithArgPrefix(string arg)
      {
         bool ret = false;         
         
         foreach(string prefix in _validArgPrefixes)
         {
            string possiblePrefix = arg.Substring(0, prefix.Length);

            if (0 == prefix.CompareTo(possiblePrefix))
            {
               ret = true;
               break;
            }
         }

         return ret;
      }

      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public IEnumerator GetEnumerator() 
      {
         return _cmdArgs.Values.GetEnumerator();
      }


      /// <summary>
      /// Running through the array of commandline arguements
      /// compares them with _cmdArgs array and sets them
      /// to selected when found, and passes in data to them
      /// when the data is found
      /// </summary>
      /// <param name="args">string array, typically the string[] received from Main</param>
      public void ParseCmdLineToArgs(string[] args)
      {
         // if we didnt get anything we aint running
         if (0 == args.Length)
            throw new CommandlineException("no arguments received to parse");

         // go through each argument looking for ones that
         // start with something in _validArgPrefixes array
         // if is then find that in _cmdArgs
         for(int count = 0; count < args.Length; count ++)
         {
            // if the argument start with an argument prefix
            if (true == IsStartingWithArgPrefix(args[count]))
            {
               // test to see if the argument is in our _cmdArgs hashtable

               // to allow for arguments to have more than a single char
               // eg:   -ag is a valid argument now
               string argValue = args[count].Substring(1);

               if (true == _cmdArgs.ContainsKey(argValue))
               {
                  // it is, so get the object and process it
                  CommandLineArgument argument = (CommandLineArgument) _cmdArgs[argValue];

                  // set it to selected
                  argument.Selected = true;

                  // and if its a data argument
                  // get the data that should go with it
                  if (argument is DataCommandLineArgument)
                  {
                     count ++;

                     // need to make sure there is some data to get
                     if (count >= args.Length)
                        throw new CommandlineException("expected additional parameters");

                     // and need to make sure the next in the array is not another
                     // argument
                     if (true == IsStartingWithArgPrefix(args[count]))                     
                        throw new CommandlineException("parameters not formatted as expected");

                     // we have data!
                     (argument as DataCommandLineArgument).Data = args[count];
                  }

               }
               else
               {
                  // we have an invalid argument
                  throw new CommandlineException("invalid cmdArg received");
               }
            }
            else
            {
               // it doesnot start with an argument prefix so
               // we assume this is a file name
               _fileArgs.Add(args[count]);
            }

         }
      }

      /// <summary>
      /// just adds an argument to the hash table
      /// </summary>
      /// <param name="arg"></param>
      public void AddArg(CommandLineArgument arg)
      {
         _cmdArgs.Add(arg.Argument, arg);
      }

      /// <summary>
      /// 
      /// </summary>
      public int ArgCount
      {
         get { return _cmdArgs.Count;}
      }

      /// <summary>
      /// 
      /// </summary>
      public string[] ArgumentPrefixes
      {
         get { return _validArgPrefixes;}
         set { _validArgPrefixes = value;}
      }

      /// <summary>
      /// 
      /// </summary>
      public StringCollection FileArgs
      {
         get { return _fileArgs;}
         set { _fileArgs = value;}
      }


   }
   #endregion

}
